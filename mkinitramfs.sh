#!/bin/bash

VERSION="1.0.0"
DIR='/usr/src/initramfs'
KEYMAP="/usr/share/keymaps/i386/qwerty/pt-latin1.map.gz"

if [ -z "$1" ]; then
	echo "Usage: $0 <generated initramfs file>"
	exit
fi

DESTINATION="$1"

add_executable() {
	local EXE="$1"

	if [[ "$(ldd $EXE)" == *"not a dynamic executable"* ]]; then
		echo "Adding $EXE."
	else
		echo "Upsie, $EXE not statically linked..."
		exit
	fi

	cp -a "$EXE" bin/
}

if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root"
	exit
fi

mkdir -p "$DIR"

cd "$DIR"
rm -rf *

mkdir -p bin sbin dev etc proc sys run newroot

cp -a /dev/{null,console,tty} dev/

add_executable /bin/busybox
add_executable /sbin/mdadm

if [ -e /etc/mdadm.conf ]; then
	echo "Including /etc/mdadm.conf"
	cp -a /etc/mdadm.conf etc/
else
	echo "Cannot find /etc/mdadm.conf, **not including it**"
fi

if [ -e $KEYMAP ]; then
	echo "Including $(basename $KEYMAP .map.gz) as default keymap"
	loadkeys -b $KEYMAP > keymap.map
else
	echo "Cannot find $KEYMAP, **not setting default keymap**"
fi

cat << EOF  > init
#!/bin/busybox sh

NORMAL="\e[0m"
CYAN="\e[0;36m"
RED="\e[1;31m"

rescue_shell() {
    /bin/busybox --install -s
    loadkmap < keymap.map
    setsid cttyhack sh
}

cmdline() {
    local value
    value=" \$(cat /proc/cmdline) "
    value="\${value##* \$1=}"
    value="\${value%% *}"
    [ "\$value" != "" ] && echo "\$value"
}

msg() {
    echo -e "  \${CYAN}\${1}\${NORMAL}"
}

error() {
    echo -e "  \${RED}\${1}\${NORMAL}"
}

# Mount the /proc and /sys filesystems.
mount -t proc none /proc
mount -t sysfs none /sys
mount -t devtmpfs none /dev

echo 1 > /proc/sys/kernel/printk

msg "Minimal initramfs generated by mkinitramfs $VERSION on $(date '+%Y/%m/%d %H:%M:%S')"

msg "Executing \"mdadm --assemble --scan\""
mdadm --assemble --scan

ROOTFS="\$(cmdline root)"

if [ -z \${ROOTFS} ] ; then
	error "You forgot to pass the root device in the kernel cmdline :("
	rescue_shell
fi

DEVICE="\$(findfs \${ROOTFS})"

if [ -z \${DEVICE} ] ; then
	error "Cannot find the device for \${ROOTFS} :("
	rescue_shell
fi

sleep 1

msg "Attempting to mount \${DEVICE} as the new root"

# Mount the root filesystem.
until mount -o ro \${DEVICE} /newroot; do
    error "Make \${DEVICE} available manually and exit the shell to boot. :/"
    rescue_shell
done

# Clean up.
mount --move /sys /newroot/sys
mount --move /proc /newroot/proc
mount --move /dev /newroot/dev

msg "Success, switching to the real root. :D"

# Boot the real thing.
exec switch_root /newroot /sbin/init

error "Hum, something bad has happened..."
rescue_shell

EOF

chmod +x init

echo "Creating archive on $DESTINATION"
find . -print0 | cpio --null -ov --format=newc | gzip -9 > $DESTINATION
echo "Done"
